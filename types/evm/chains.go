// Code generated by github.com/atombender/go-jsonschema, DO NOT EDIT.

package evm

import (
	"encoding/json"
	"fmt"
)

type Chain struct {
	// Chain corresponds to the JSON schema field "chain".
	Chain string `json:"chain" yaml:"chain"`

	// ChainId corresponds to the JSON schema field "chainId".
	ChainId int `json:"chainId" yaml:"chainId"`

	// Ens corresponds to the JSON schema field "ens".
	Ens *ChainEns `json:"ens,omitempty" yaml:"ens,omitempty"`

	// Explorers corresponds to the JSON schema field "explorers".
	Explorers []Explorer `json:"explorers" yaml:"explorers"`

	// Faucets corresponds to the JSON schema field "faucets".
	Faucets []string `json:"faucets,omitempty" yaml:"faucets,omitempty"`

	// Icon corresponds to the JSON schema field "icon".
	Icon *string `json:"icon,omitempty" yaml:"icon,omitempty"`

	// InfoURL corresponds to the JSON schema field "infoURL".
	InfoURL string `json:"infoURL" yaml:"infoURL"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// NativeCurrency corresponds to the JSON schema field "nativeCurrency".
	NativeCurrency ChainNativeCurrency `json:"nativeCurrency" yaml:"nativeCurrency"`

	// NetworkId corresponds to the JSON schema field "networkId".
	NetworkId int `json:"networkId" yaml:"networkId"`

	// Rpc corresponds to the JSON schema field "rpc".
	Rpc []string `json:"rpc" yaml:"rpc"`

	// ShortName corresponds to the JSON schema field "shortName".
	ShortName string `json:"shortName" yaml:"shortName"`

	// Slip44 corresponds to the JSON schema field "slip44".
	Slip44 *int `json:"slip44,omitempty" yaml:"slip44,omitempty"`

	//Transfer Transfer `json:"transfer" yaml:"transfer"`
}

//type Transfer struct {
//	Contract string `json:"contract" yaml:"contract"`
//	Abi      string `json:"abi" yaml:"abi"`
//}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChainEns) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["registry"]; !ok || v == nil {
		return fmt.Errorf("field registry in ChainEns: required")
	}
	type Plain ChainEns
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChainEns(plain)
	return nil
}

type ChainlistSchemaJson struct {
	// Chains corresponds to the JSON schema field "chains".
	Chains []Chain `json:"chains" yaml:"chains"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Explorer) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Explorer: required")
	}
	if v, ok := raw["standard"]; !ok || v == nil {
		return fmt.Errorf("field standard in Explorer: required")
	}
	if v, ok := raw["url"]; !ok || v == nil {
		return fmt.Errorf("field url in Explorer: required")
	}
	type Plain Explorer
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Explorer(plain)
	return nil
}

type ChainNativeCurrency struct {
	// Decimals corresponds to the JSON schema field "decimals".
	Decimals int `json:"decimals" yaml:"decimals"`

	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Symbol corresponds to the JSON schema field "symbol".
	Symbol string `json:"symbol" yaml:"symbol"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChainNativeCurrency) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["decimals"]; !ok || v == nil {
		return fmt.Errorf("field decimals in ChainNativeCurrency: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in ChainNativeCurrency: required")
	}
	if v, ok := raw["symbol"]; !ok || v == nil {
		return fmt.Errorf("field symbol in ChainNativeCurrency: required")
	}
	type Plain ChainNativeCurrency
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChainNativeCurrency(plain)
	return nil
}

type ChainEns struct {
	// Registry corresponds to the JSON schema field "registry".
	Registry string `json:"registry" yaml:"registry"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *Chain) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["chain"]; !ok || v == nil {
		return fmt.Errorf("field chain in Chain: required")
	}
	if v, ok := raw["chainId"]; !ok || v == nil {
		return fmt.Errorf("field chainId in Chain: required")
	}
	if v, ok := raw["explorers"]; !ok || v == nil {
		return fmt.Errorf("field explorers in Chain: required")
	}
	if v, ok := raw["infoURL"]; !ok || v == nil {
		return fmt.Errorf("field infoURL in Chain: required")
	}
	if v, ok := raw["name"]; !ok || v == nil {
		return fmt.Errorf("field name in Chain: required")
	}
	if v, ok := raw["nativeCurrency"]; !ok || v == nil {
		return fmt.Errorf("field nativeCurrency in Chain: required")
	}
	if v, ok := raw["networkId"]; !ok || v == nil {
		return fmt.Errorf("field networkId in Chain: required")
	}
	if v, ok := raw["rpc"]; !ok || v == nil {
		return fmt.Errorf("field rpc in Chain: required")
	}
	if v, ok := raw["shortName"]; !ok || v == nil {
		return fmt.Errorf("field shortName in Chain: required")
	}
	type Plain Chain
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = Chain(plain)
	return nil
}

type Explorer struct {
	// Name corresponds to the JSON schema field "name".
	Name string `json:"name" yaml:"name"`

	// Standard corresponds to the JSON schema field "standard".
	Standard string `json:"standard" yaml:"standard"`

	// Url corresponds to the JSON schema field "url".
	Url string `json:"url" yaml:"url"`
}

// UnmarshalJSON implements json.Unmarshaler.
func (j *ChainlistSchemaJson) UnmarshalJSON(b []byte) error {
	var raw map[string]interface{}
	if err := json.Unmarshal(b, &raw); err != nil {
		return err
	}
	if v, ok := raw["chains"]; !ok || v == nil {
		return fmt.Errorf("field chains in ChainlistSchemaJson: required")
	}
	type Plain ChainlistSchemaJson
	var plain Plain
	if err := json.Unmarshal(b, &plain); err != nil {
		return err
	}
	*j = ChainlistSchemaJson(plain)
	return nil
}
